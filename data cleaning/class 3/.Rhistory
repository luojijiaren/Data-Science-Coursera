mydata=read.csv(file.choose())
install.packages('ggplot2')
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
X=2
typeof(X)
Y=2L
typeof(Y)
library(ggplot2)
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
N=100
N=100
N=100
N=100
N=100
N=100
N=100
counter=0
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
counter=counter+1
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=1000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=10000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- function (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
nll <- make.NeglogLik(normals)
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
nll <- make.NegLogLik(normals)
nll
optim (c(mu=0,sigma=1),nll)$par
nll <- make.NegLogLik(normals, c(1,False))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
nll <- make.NegLogLik(normals, c(1,FALSE))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<-seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<- Sys.time()
x
polluutantmean(''specdata'','sulfate',1:10)
polluutantmean('specdata','sulfate',1:10)
pollutantmean('specdata','sulfate',1:10)
install.packages("swirl")
library(swirl)
swirl()\
swirl()
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<11
10<=10
5!=7
NOT 5==7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <-sample(10)
ints
ints > 5
which(ints>7)
any(ints<=0)
any(ints<0)
all(ints>0)
exit()
exit
quit()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
f1 <- funciton(x){}
f1 <- funciton(x){}
f1 <- funciton(x){x}
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(var,c(1.4,3.6,7.9,8.8)
)
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram('hi','lynn')
submit()
submit()
submit()
submit()
submit()
mad_libs('ruseel st','a b','wo shi')
submit()
'I love' %p% 'R!'
'I'%P%'love'%p%'R!'
'I'%p%'love'%p%'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2=as.Date(d1-1)
d2<-as.Date('1969-01-01')
unclass(d2)
Sys.time()
tq <- Sys.time()
t1 <- Sys.time()
print(t1)
t1
class(t1)
unclass(t1)
t2 <-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1 <- weekdays(Sys.Date())
weekdays(d1)
months(t1)
months(t2)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- str("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>d1
Sys.time()>t1
Sys.time()-t1
difftime
difftime(Sys.time(),t1,units='days')
getwd()
setwd('C:\\Users\\fzhan\\Documents\\GitHub\\Data Science Coursera\\data cleaning\\class 3')
if (!file.exists('housing.csv')){download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv','housing.csv')}
data=read.csv('housing.csv')
head(data)
library(dplyr)
names(dta)
names(data)
q1 <- data[which(data$ACR==3 & data$AGS==6)]
head(q1)
q1 <- data[which((data$ACR==3) & (data$AGS==6))]
q1 <- data[which((data$ACR==3) & (data$AGS==6)),]
head(q1)
install.packages("jpeg")
d2 <- readJPEG('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg')
install.packages('jpeg',,'http://www.rforge.net/')
install.packages('jpeg',,'http://www.rforge.net/')
install.packages('jpeg',,'http://www.rforge.net/src/contrib/jpeg_0.1-6.tar.gz')
install.packages(http://www.rforge.net/src/contrib/jpeg_0.1-6.tar.gz')
install.packages('http://www.rforge.net/src/contrib/jpeg_0.1-6.tar.gz')
?jpeg
library(jpeg)
d2 <- readJPEG('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg')
?readJPEG
d2 <- readJPEG('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg',native = TRUE)
d2 <- readJPEG('getdata%2Fjeff.jpg',native = TRUE)
?quantile
quantile(d2,probs = 0.3)
quantile(d2,probs = 0.8)
if (!file.exists('gdp.csv')){download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','gdp.csv')}
if (!file.exists('education.csv')){download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv','eduction.csv')}
g=read.csv('gdp.csv')
e=read.csv('education.csv')
if (!file.exists('education.csv')){download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv','education.csv')}
g=read.csv('gdp.csv')
e=read.csv('education.csv')
names(g)
names(e)
head(g)
?merge
m=merge(g,b,by.x = 'X',by.y = 'CountryCode')
m=merge(g,e,by.x = 'X',by.y = 'CountryCode')
dim(m)
m=merge(g,e,by.x = 'X',by.y = 'CountryCode',all=FALSE)
View(m)
View(m)
names(m)
unique(m$X)
count(unique(m$X))
?order
m[order(m$Gross.domestic.product.2012,decreasing = TRUE),][13,1]
m_ordered=m[order(m$Gross.domestic.product.2012,decreasing = TRUE),]
m_ordered[13,1]
View(m)
View(m)
View(m_ordered)
View(m_ordered)
head(g)
head(m_ordered)
m_ordered=m[order(m$Gross.domestic.product.2012),]
m_ordered[13,4]
m_ordered[13,1]
View(m_ordered)
View(m_ordered)
m_ordered=m[order(m$Gross.domestic.product.2012,na.last = TRUE),]
View(m_ordered)
View(m_ordered)
?merge
m_ordered=m[order(m$Gross.domestic.product.2012,na.last = FALSE),]
View(m_ordered)
View(m_ordered)
m_ordered=m[order(m$Gross.domestic.product.2012),]
m_ordered[!is.na(m$Gross.domestic.product.2012),][13,4]
result=m_ordered[!is.na(m_ordered$Gross.domestic.product.2012),][13,4]
m_ordered[!is.na(m_ordered$Gross.domestic.product.2012),][13,4]
result=m_ordered[!is.na(m_ordered$Gross.domestic.product.2012),]
View(result)
View(result)
g=read.csv('gdp.csv'.na.strings=' ')
g=read.csv('gdp.csv',na.strings=' ')
e=read.csv('education.csv'na.strings=' ')
e=read.csv('education.csv',na.strings=' ')
m=merge(g,e,by.x = 'X',by.y = 'CountryCode',all=FALSE)
m_ordered=m[order(m$Gross.domestic.product.2012),]
result=m_ordered[!is.na(m_ordered$Gross.domestic.product.2012),]
g=read.csv('gdp.csv',na.strings='')
str(g)
e=read.csv('education.csv',na.strings='')
m=merge(g,e,by.x = 'X',by.y = 'CountryCode',all=FALSE)
m_ordered=m[order(m$Gross.domestic.product.2012),]
result=m_ordered[!is.na(m_ordered$Gross.domestic.product.2012),]
result[13,4]
View(result)
View(result)
str(m)
m$Gross.domestic.product.2012=as.numeric(m$Gross.domestic.product.2012)
m_ordered=m[order(m$Gross.domestic.product.2012),]
result=m_ordered[!is.na(m_ordered$Gross.domestic.product.2012),]
result[13,4]
View(result)
View(result)
m_ordered=m[order(m$Gross.domestic.product.2012,decreasing = TRUE),]
result=m_ordered[!is.na(m_ordered$Gross.domestic.product.2012),]
result[13,4]
View(result)
View(result)
m_ordered[13,4]
m_ordered[1,4]
View(result)
View(result)
?read.table
g=read.csv('gdp.csv',na.strings='')
View(g)
View(g)
g=g[5:235,]
View(g)
View(g)
g=read.csv('gdp.csv',na.strings='')
View(g)
View(g)
g=g[5:194,]
m=merge(g,e,by.x = 'X',by.y = 'CountryCode',all=FALSE)
m$Gross.domestic.product.2012=as.numeric(m$Gross.domestic.product.2012)
m_ordered=m[order(m$Gross.domestic.product.2012,decreasing = TRUE),]
m_ordered[13,4]
View(m_ordered)
View(m_ordered)
View(g)
View(g)
View(m)
View(m)
View(m_ordered)
View(m)
View(m)
View(e)
View(e)
g=g[5:194,]
e=read.csv('education.csv',na.strings='')
m=merge(g,e,by.x = 'X',by.y = 'CountryCode',all=FALSE)
g=read.csv('gdp.csv',na.strings='')
g=g[5:194,]
e=read.csv('education.csv',na.strings='')
m=merge(g,e,by.x = 'X',by.y = 'CountryCode',all=FALSE)
View(m)
m$Gross.domestic.product.2012=as.numeric(m$Gross.domestic.product.2012)
View(m)
View(m)
m$Gross.domestic.product.2012=as.numeric(as.character(m$Gross.domestic.product.2012))
g=read.csv('gdp.csv',na.strings='')
g=g[5:194,]
e=read.csv('education.csv',na.strings='')
m=merge(g,e,by.x = 'X',by.y = 'CountryCode',all=FALSE)
m$Gross.domestic.product.2012=as.numeric(as.character(m$Gross.domestic.product.2012))
View(m)
View(m)
m_ordered=m[order(m$Gross.domestic.product.2012,decreasing = TRUE),]
m_ordered[13,4]
View(m)
View(m)
View(m_ordered)
View(m_ordered)
View(m)
View(m)
library(dplyr)
m%<%
group_by(Income.Group)%<%
summarize(mean(Gross.domestic.product.2012)) %<%
print
m%>%
group_by(Income.Group)%>%
summarize(mean(Gross.domestic.product.2012)) %>%
print
cut(m$Gross.domestic.product.2012,n=5)
?cut
library(Hmisc)
cut(m$Gross.domestic.product.2012,g=5)
cut2(m$Gross.domestic.product.2012,g=5)
table(m$Income.Group,m$group)
m$group<-cut2(m$Gross.domestic.product.2012,g=5)
table(m$Income.Group,m$group)
?grep
