mydata=read.csv(file.choose())
install.packages('ggplot2')
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
X=2
typeof(X)
Y=2L
typeof(Y)
library(ggplot2)
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
N=100
N=100
N=100
N=100
N=100
N=100
N=100
counter=0
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
counter=counter+1
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=1000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=10000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- function (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
nll <- make.NeglogLik(normals)
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
nll <- make.NegLogLik(normals)
nll
optim (c(mu=0,sigma=1),nll)$par
nll <- make.NegLogLik(normals, c(1,False))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
nll <- make.NegLogLik(normals, c(1,FALSE))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<-seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<- Sys.time()
x
polluutantmean(''specdata'','sulfate',1:10)
polluutantmean('specdata','sulfate',1:10)
pollutantmean('specdata','sulfate',1:10)
install.packages("swirl")
library(swirl)
swirl()\
swirl()
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<11
10<=10
5!=7
NOT 5==7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <-sample(10)
ints
ints > 5
which(ints>7)
any(ints<=0)
any(ints<0)
all(ints>0)
exit()
exit
quit()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
f1 <- funciton(x){}
f1 <- funciton(x){}
f1 <- funciton(x){x}
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(var,c(1.4,3.6,7.9,8.8)
)
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram('hi','lynn')
submit()
submit()
submit()
submit()
submit()
mad_libs('ruseel st','a b','wo shi')
submit()
'I love' %p% 'R!'
'I'%P%'love'%p%'R!'
'I'%p%'love'%p%'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2=as.Date(d1-1)
d2<-as.Date('1969-01-01')
unclass(d2)
Sys.time()
tq <- Sys.time()
t1 <- Sys.time()
print(t1)
t1
class(t1)
unclass(t1)
t2 <-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1 <- weekdays(Sys.Date())
weekdays(d1)
months(t1)
months(t2)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- str("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>d1
Sys.time()>t1
Sys.time()-t1
difftime
difftime(Sys.time(),t1,units='days')
library(swirl)
swirl()
swirl()
path2csv <- file.path('~/2014-07-08.csv')
df <- read.csv(path2csv, as.is = TRUE)
dim(df)
head(df)
setwd('C:\\Users\\fzhan\\Documents\\GitHub\\Data Science Coursera\\data cleaning\\class 3')
df <- read.csv(path2csv, as.is = TRUE)
dim(df)
head(df)
path2csv <- file.path('2014-07-08.csv')
### Intro
df <- read.csv(path2csv, as.is = TRUE)
dim(df)
head(df)
swirl()
library(dplyr)
cran <- tbl_df(df)
cran
?manip
# "The dplyr philosophy is to have small functions that each do
# one thing well."
### select()
select(cran, ip_id, package, country) # reorders
select(cran, r_arch:country)
select(cran, -(X:time))
select(cran, ip_id:size)
swirl()
install_course("Getting_and_Cleaning_Data")
swirl()
mydf <-read.csv(path2csv,stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion('dplyr')
cran <-tbl_df(mydf)
rm('mydf')
cran
?select
select(cran,ip_id,package,country)
select(cran,5:10)
5:20
select(cran,r_arch:country
)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:10)
-(5:20)
names(cran)
select(cran,-(X:size))
filter(cran,package='swirl')
filter(cran,package=='swirl')
filter(cran, r_version == "3.1.1", country ==
| "US")
filter(cran, r_version == "3.1.1", country =='US'
)
?Comparison
filter(cran, users %in% 'India')
names(cran)
filter(cran, country =='IN',r_version<='3.0.2')
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500,r_os=='linux-gnu')
filter(cran,!is.na(r_version))
is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id))
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,c(ip_id,package,size))
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/ 2^20)
mutate(cran3,size_mb=size/ 2^20,size_gb=size/2^10)
mutate(cran3,size_mb=size/ 2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size-1000)
mutate(cran3,correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
libray(dplyr)
library(dplyr)
cran <- tbl_df(mydf)
rm('mydf')
cran
?group_by()
?group_by
by_pakage <- group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summary(by_package,mean(size))
summarize(by_package,mean(size))
submit()
submit()
reset()
submit()
swirl()
submit()
reset()
swirl()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts <- filter(cran, count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
Viw(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique,probs=0.99)
filter(pack_sum,unique>465)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
arrange(top_unique,desc(unique))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id,country,package,size) %>%
print
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2,sex_class,count,-grade)
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(data=res,col=sex_class,into=c('sex',class))
separate(data=res,col=sex_class,into=c('sex','class'))
submit()
students3
submit()
submit()
?spead
?spread
submit()
library(readr)
parse_number('class5')
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class=parse_number(class))
### Call to mutate() goes here %>%
print
str(students3)
class(parse_number(class5))
class(parse_number('class5'))
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status='passed')
failed <- mutate(passed,status='failed')
failed <- mutate(failed,status='failed')
bind_rows(passed,failed)
sat
?separate
submit()
submit()
submit()
Sys.getlocale('LC_TIME')
