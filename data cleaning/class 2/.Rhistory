mydata=read.csv(file.choose())
install.packages('ggplot2')
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
X=2
typeof(X)
Y=2L
typeof(Y)
library(ggplot2)
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
N=100
N=100
N=100
N=100
N=100
N=100
N=100
counter=0
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
counter=counter+1
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=1000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=10000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- function (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
nll <- make.NeglogLik(normals)
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
nll <- make.NegLogLik(normals)
nll
optim (c(mu=0,sigma=1),nll)$par
nll <- make.NegLogLik(normals, c(1,False))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
nll <- make.NegLogLik(normals, c(1,FALSE))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<-seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<- Sys.time()
x
polluutantmean(''specdata'','sulfate',1:10)
polluutantmean('specdata','sulfate',1:10)
pollutantmean('specdata','sulfate',1:10)
install.packages("swirl")
library(swirl)
swirl()\
swirl()
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<11
10<=10
5!=7
NOT 5==7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <-sample(10)
ints
ints > 5
which(ints>7)
any(ints<=0)
any(ints<0)
all(ints>0)
exit()
exit
quit()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
f1 <- funciton(x){}
f1 <- funciton(x){}
f1 <- funciton(x){x}
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(var,c(1.4,3.6,7.9,8.8)
)
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram('hi','lynn')
submit()
submit()
submit()
submit()
submit()
mad_libs('ruseel st','a b','wo shi')
submit()
'I love' %p% 'R!'
'I'%P%'love'%p%'R!'
'I'%p%'love'%p%'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2=as.Date(d1-1)
d2<-as.Date('1969-01-01')
unclass(d2)
Sys.time()
tq <- Sys.time()
t1 <- Sys.time()
print(t1)
t1
class(t1)
unclass(t1)
t2 <-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1 <- weekdays(Sys.Date())
weekdays(d1)
months(t1)
months(t2)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- str("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>d1
Sys.time()>t1
Sys.time()-t1
difftime
difftime(Sys.time(),t1,units='days')
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user='genome',host='genome=mysql.cse.ucsc.edu')
ucscDb <- dbConnect(MySQL(),user="genome",host="genome=mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,'show databases;'); dbDisconnect(ucscDb)
result
ucscDb <- dbConnect(MySQL(),user="genome",db='hg19',host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(ucscDb)
length(allTables)
allTables[1:5]
dbDisconnect(ucscDb)
source('http://bioconductor.org/biocLite.R')
biocLite('rhdf5')
library(rhdf5)
created=h5createFile('example.h5')
created
created=h5createGroup('example.h5','foo')
created=h5createGroup('example.h5','baa')
created=h5createGroup('example.h5','foo/foobaa')
h5ls('example.h5')
B=array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,'scale')<-'liter'
install.packages("httr")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "f281671a1b1e3c74c423",
secret = "f59c62491c3383b76bbb7ac52a4f57d2145c30ed")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/luojijiaren", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/luojijiaren"))
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at
#    https://github.com/settings/developers. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "f281671a1b1e3c74c423",
secret = "f59c62491c3383b76bbb7ac52a4f57d2145c30ed")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
# Can be github, linkedin etc depending on application
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "luojijiaren",
key = "f281671a1b1e3c74c423",
secret = "f59c62491c3383b76bbb7ac52a4f57d2145c30ed")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("sqldf")
getwd('C:\Users\fzhan\Documents\GitHub\Data Science Coursera\data cleaning\class 2')
getwd('C:\\Users\\fzhan\\Documents\\GitHub\\Data Science Coursera\\data cleaning\\class 2')
getwd('C:/Users/fzhan/Documents/.GitHub/Data Science Coursera/data cleaning/class 2')
setwd('C:\\Users\\fzhan\\Documents\\GitHub\\Data Science Coursera\\data cleaning\\class 2')
getwd()
library(sqldf)
acs<-read.csv('aa.csv')
sqldf('select pwgtp1 from acs where AGEP<50')
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select * from acs")
?sqldf
head(acs)
sqldf("select * from acs")
library(RMySQL)
sqldf("select * from acs")
