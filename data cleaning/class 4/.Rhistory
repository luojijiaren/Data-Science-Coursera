mydata=read.csv(file.choose())
install.packages('ggplot2')
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
X=2
typeof(X)
Y=2L
typeof(Y)
library(ggplot2)
ggplot(data=mydata,aes(x=carat,y=price,colour=clarity))+geom_point()
N=100
N=100
N=100
N=100
N=100
N=100
N=100
counter=0
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c=rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter+=1
}
counter=counter+1
}
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=1000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
N=10000
counter=0
for (c in rnorm(N)){
if(c<1 & c>-1){
counter=counter+1
}
}
anser=counter/N
anser
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- functinon (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
make.NegLogLik<- function (data,fixed=c(FALSE,FALSE))
{
params <- fixed
function(p) {
params[!fixed]<-p
mu<-params[1]
sigma <- params [2]
a<- -0.5 * length(data)*log(2*pi*sigma*2)
b <- -0.5 *sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
nll <- make.NeglogLik(normals)
set.seed(1)
normals <- rnorm(100,1,2)
nll <- make.NeglogLik(normals)
nll <- make.NegLogLik(normals)
nll
optim (c(mu=0,sigma=1),nll)$par
nll <- make.NegLogLik(normals, c(1,False))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
nll <- make.NegLogLik(normals, c(1,FALSE))
x<seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<-seq(1.7,1.9,len=100)
y <- sapply(x,nll)
plot(x,exp(-(y-min(y))),type='l')
x<- Sys.time()
x
polluutantmean(''specdata'','sulfate',1:10)
polluutantmean('specdata','sulfate',1:10)
pollutantmean('specdata','sulfate',1:10)
install.packages("swirl")
library(swirl)
swirl()\
swirl()
TRUE==TRUE
FALSE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<11
10<=10
5!=7
NOT 5==7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <-sample(10)
ints
ints > 5
which(ints>7)
any(ints<=0)
any(ints<0)
all(ints>0)
exit()
exit
quit()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
f1 <- funciton(x){}
f1 <- funciton(x){}
f1 <- funciton(x){x}
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(var,c(1.4,3.6,7.9,8.8)
)
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram('hi','lynn')
submit()
submit()
submit()
submit()
submit()
mad_libs('ruseel st','a b','wo shi')
submit()
'I love' %p% 'R!'
'I'%P%'love'%p%'R!'
'I'%p%'love'%p%'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2=as.Date(d1-1)
d2<-as.Date('1969-01-01')
unclass(d2)
Sys.time()
tq <- Sys.time()
t1 <- Sys.time()
print(t1)
t1
class(t1)
unclass(t1)
t2 <-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1 <- weekdays(Sys.Date())
weekdays(d1)
months(t1)
months(t2)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- str("October 17, 1986 08:24")
t3 <- "October 17, 1986 08:24"
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>d1
Sys.time()>t1
Sys.time()-t1
difftime
difftime(Sys.time(),t1,units='days')
setwd('C:/Users/fzhan/Documents/GitHub/Caravan Insurance Challenge')
data=read.csv('caravan-insurance-challenge.csv')
getwd()
setwd('C:/Users/fzhan/Documents/GitHub/Caravan Insurance Challenge')
data=read.csv('caravan-insurance-challenge.csv')
setwd('GitHub/Caravan Insurance Challenge')
setwd('C:\\Users\\fzhan\\Documents\\GitHub\\Data Science Coursera\\data cleaning\\class 4')
d1<- read.csv('survey_house.csv')
names(d1)
?grep
grep('[a-z]',letters)
grep('^wgtp',names(d1),value=T)
strsplit(grep('^wgtp',names(d1),value=T))
strsplit('wgtp7')
?strsplit
strsplit('wgtp7','')
n=grep('^wgtp',names(d1),value=T)
sapply(n,strsplit)
sapply(strsplit(n,''))
sapply(n,strsplit(''))
sapply(n,strsplit(,''))
sapply(n,strsplit(n,''))
strsplit(names(d1),'wgtp')
m=strsplit(names(d1),'wgtp')
m[[123]]
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','GQP.csv')
d2=read.csv('GQP.csv')
View(d2)
View(d2)
View(d2)
d2
d22=d2[5:194,]
View(d22)
View(d22)
d22
d22=d2[5:194,c(1,2,4,5)]
View(d22)
View(d22)
head(d22)
sub(',','',d22$X.3,)
mean(sub(',','',d22$X.3,))
d22$x.3=sub(',','',d22$X.3,)
class(d22$x.3)
mean(as.numeric(sub(',','',d22$X.3,)))
as.numeric(sub(',','',d22$X.3,))
View(d22)
View(d22)
mean(as.numeric(sub(',','',d22$X.3,)),na.rm = TRUE)
mean(as.numeric(gsub(',','',d22$X.3,)),na.rm = TRUE)
grep("^United",d2$X)
d2=read.csv('GQP.csv')
d22=d2[5:194,c(1,2,4,5)]
mean(as.numeric(gsub(',','',d22$X.3,)),na.rm = TRUE)
head(d22)
grep("^United",d22$X.2)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv','education.csv')
d4=read.csv('education.csv')
head(d4)
?merge
names(d22)
names(d4)
d44=merge(d22,d4,by.x='X',by.y = 'CountryCode')
head(d44)
d44[grepl('Fiscal year end: June 30',d44$Special.Notes),]
dim(d44[grepl('Fiscal year end: June 30',d44$Special.Notes),])
d44[grepl('Fiscal year end: June 30',d44$Special.Notes),.N]
dim(d44[grepl('Fiscal year end: June 30',d44$Special.Notes),])[1]
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(amzn)
class(sampleTimes)
year(sampleTimes)
weekdays(sampleTimes)
library(lubridate)
year(sampleTimes)
sum(year(sampleTimes)==2012)
wday(sampleTimes)
sum(year(sampleTimes)==2012 & wday(sampleTimes==1))
d5=sampleTimes[year(sampleTimes)==2012]
head(d5)
sum(wday(d5)==1))
wday(d5)
weekdays(d5)
sum(year(sampleTimes)==2012 & weekdays(sampleTimes)=='Monday')
