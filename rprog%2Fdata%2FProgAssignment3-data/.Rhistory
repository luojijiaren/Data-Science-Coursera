View(d2)
View(d2)
View(d1)
View(d1)
View(d2)
View(d2)
d1=d[,c(7,select,2)]
d2=d1[!is.na(d1[,2]),]
View(d2)
View(d2)
d2[,1]=suppressWarnings(as.numeric(d2[,1]))
?tapplt
?tapply
match(2,c(1,2,3))
d2[,2]=suppressWarnings(as.numeric(d2[,2]))
tapply(as.data.frame(d2[,c(2,3)]),d2[,1],do.call(order))
tapply(as.data.frame(d2[,c(2,3)]),d2[,1],order)
tapply(d2[,c(2,3)],d2[,1],order)
View(d2)
View(d2)
d2=d1[!is.na(d1[,2]),]
d2[,2]=suppressWarnings(as.numeric(d2[,2]))
View(d2)
View(d2)
out=data.frame()
for (state in levels(d2[,1])) {
d3=d2[State=state,]
d4=d3[order(d3[,2],d3[,3]),]
out=rbind(out,d4)
}
outp=data.frame()
for (state in levels(d2[,1])) {
d3=d2[State=state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
outp=rbind(outp,c(state,out))
}
as.data.frame(c('MD','hospital'))
rbind(c('ma','h1'),c('md','h2'))
dim(levels(d2[,1]))
View(d2)
View(d2)
levels(d2[,1])
unique(d2[,1])
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[State=state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
print(c(state,out))
outp=rbind(outp,as.data.frame(c(state,out)))
}
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[State=state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
print(c(state,out))
outp=rbind(outp,c(state,out))
}
for (state in unique(d2[,1])) {
d3=d2[State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
print(c(state,out))
outp=rbind(outp,c(state,out))
}
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
print(c(state,out))
outp=rbind(outp,c(state,out))
}
num='best'
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
print(c(state,out))
outp=rbind(outp,c(state,out))
}
View(outp)
View(outp)
class(outp)
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
outp=rbind(outp,c(out,state))
}
names(output)=c('hospital','state')
names(outp)=c('hospital','state')
View(outp)
View(outp)
names(outp)
dim(outp)
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
outp=rbind(outp,c(out,state))
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
outp=outp[,1:2]
names(oup)=c('hospital','state')
oup
names(outp)=c('hospital','state')
outp
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
outp=rbind(outp,c(out,state))
}
dim(outp)
names(outp)
class(outp)
colnames(oup)=c('hospital','state')
colnames(outp)=c('hospital','state')
outp
rankall <- function(outcome, num = "best") {
## Read outcome data
d=read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = 'Not Available')
## Check that outcome is valid
if (outcome=='heart attack'){select <-11}
else if (outcome=='heart failure'){select <-17}
else if (outcome=='pneumonia'){select <-23}
else {stop('invalid outcome')}
## For each state, find the hospital of the given rank
d1=d[,c(7,select,2)]
d2=d1[!is.na(d1[,2]),]
d2[,2]=suppressWarnings(as.numeric(d2[,2]))
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out='NA'}
else{out=d4[num,3]}
}
outp=rbind(outp,c(out,state))
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
colnames(outp)=c('hospital','state')
outp
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
d=read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = 'Not Available')
## Check that outcome is valid
if (outcome=='heart attack'){select <-11}
else if (outcome=='heart failure'){select <-17}
else if (outcome=='pneumonia'){select <-23}
else {stop('invalid outcome')}
## For each state, find the hospital of the given rank
d1=d[,c(7,select,2)]
d2=d1[!is.na(d1[,2]),]
d2[,2]=suppressWarnings(as.numeric(d2[,2]))
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){return(NA)}
else{out=d4[num,3]}
}
outp=rbind(outp,c(out,state))
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
outp=outp[order(outp[,2],)]
colnames(outp)=c('hospital','state')
outp
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
d=read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = 'Not Available')
## Check that outcome is valid
if (outcome=='heart attack'){select <-11}
else if (outcome=='heart failure'){select <-17}
else if (outcome=='pneumonia'){select <-23}
else {stop('invalid outcome')}
## For each state, find the hospital of the given rank
d1=d[,c(7,select,2)]
d2=d1[!is.na(d1[,2]),]
d2[,2]=suppressWarnings(as.numeric(d2[,2]))
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){num=NA}
else{out=d4[num,3]}
}
outp=rbind(outp,c(out,state))
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
outp=outp[order(outp[,2],)]
colnames(outp)=c('hospital','state')
outp
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
d=read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = 'Not Available')
## Check that outcome is valid
if (outcome=='heart attack'){select <-11}
else if (outcome=='heart failure'){select <-17}
else if (outcome=='pneumonia'){select <-23}
else {stop('invalid outcome')}
## For each state, find the hospital of the given rank
d1=d[,c(7,select,2)]
d2=d1[!is.na(d1[,2]),]
d2[,2]=suppressWarnings(as.numeric(d2[,2]))
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out=NA}
else{out=d4[num,3]}
}
outp=rbind(outp,c(out,state))
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
outp=outp[order(outp[,2],)]
colnames(outp)=c('hospital','state')
outp
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
d=read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings = 'Not Available')
## Check that outcome is valid
if (outcome=='heart attack'){select <-11}
else if (outcome=='heart failure'){select <-17}
else if (outcome=='pneumonia'){select <-23}
else {stop('invalid outcome')}
## For each state, find the hospital of the given rank
d1=d[,c(7,select,2)]
d2=d1[!is.na(d1[,2]),]
d2[,2]=suppressWarnings(as.numeric(d2[,2]))
outp=NULL
for (state in unique(d2[,1])) {
d3=d2[d2$State==state,]
d4=d3[order(d3[,2],d3[,3]),]
if (num=='best') {out=d4[1,3]}
else if (num=='worst') {out=d4[nrow(d4),3]}
else {
num=as.numeric(num)
if (is.na(num)) {stop('invalid num')}
else if (num>nrow(d4)){out=NA}
else{out=d4[num,3]}
}
outp=rbind(outp,c(out,state))
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
outp=outp[order(outp[,2]),]
colnames(outp)=c('hospital','state')
outp
}
head(rankall("heart attack", 20), 10)
a=head(rankall("heart attack", 20), 10)
is.na(a[1,1])
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source(best.R)
getwd()
source(best.R)
source('best.R')
source('rankall.R')
source('rankhospital.R')
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
d=read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
d=d[d$State=='NC',]
d1=d[,c(11,2)]
#d2=d1[complete.cases(d1),]
d2[,1]=suppressWarnings(as.numeric(d2[,1]))
d2=d2[!is.na(d2[,1]),]
d3=d2[do.call(order,as.data.frame(d2)),]
d3
d1
d=read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
d=d[d$State=='NC',]
d
View(d1)
View(d1)
d2
d1=d[,c(11,2)]
#d2=d1[complete.cases(d1),]
d2[,1]=suppressWarnings(as.numeric(d2[,1]))
d2
d=read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
d=d[d$State=='NC',]
d1=d[,c(11,2)]
#d2=d1[complete.cases(d1),]
d2[,1]=suppressWarnings(as.numeric(d2[,1]))
d1=d[,c(11,2)]
#d2=d1[complete.cases(d1),]
d2[,1]=as.numeric(d2[,1])
View(d1)
View(d1)
d1=d[,c(11,2)]
#d2=d1[complete.cases(d1),]
d2[,1]=as.numeric(as.chard2[,1])
d1=d[,c(11,2)]
#d2=d1[complete.cases(d1),]
d2[,1]=as.numeric(as.character(d2[,1]))
d2
d1=d[,c(11,2)]
d2[,1]=as.numeric(as.character(d2[,1]))
d1
d1[,1]=suppressWarnings(as.numeric(d1[,1]))
d2=d1[!is.na(d1[,1]),]
d2[,1]=as.numeric(d2[,1]))
source('rankhospital.R')
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
View(r)
View(r)
subset(r, state == "HI")$hospital
subset(r,state=='HI')
r <- rankall("pneumonia", "worst")
r[state=='NJ',1]
r[state=='NJ',]
class(r)
as.character(subset(as.data.frame(r), state == "NJ")$hospital)
source('rankall.R')
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
?gsub
if(!file.exists('data')){dir.create('data')}
download.file('https://data.baltimorecity.gov/api/views/frj6-ikmm/rows.csv?accessType=DOWNLOAD','./data/camera.csv')
list.files(./data)
list.files(./data/)
list.files('./data')
install.packages("data.table")
data <- download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv','.data/community.csv')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv','.data/community.csv')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv','./data/community.csv')
data=read.table('./data/community.csv')
View(data)
View(data)
data=read.csv('./data/community.csv')
data[data$VAL==24,]
data2=data[data$VAL==24,]
data2=data[which(data$VAL==24),]
data$FES
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx','./data/gas.xlsx')
library(xlsx)
read.xlsx
install.packages("xlsx")
library(xlsx)
dat <- read.xlsx('./data/gas.xlsx',1,rowIndex=18:23,colIndex = 7:15)
dat <- read.xlsx2('./data/gas.xlsx',1,rowIndex=18:23,colIndex = 7:15)
dat <- read.xlsx2('./data/gas.xlsx',sheetIndex = 1,rowIndex=18:23,colIndex = 7:15)
dat <- read.xlsx2("./data/gas.xlsx",sheetIndex = 1,rowIndex=18:23,colIndex = 7:15)
dat <- read.xlsx2(file="./data/gas.xlsx",sheetIndex = 1,rowIndex=18:23,colIndex = 7:15)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx','./data/gas.xlsx',mode='wb')
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx','./data/gas.xlsx',mode='wb')
dat <- read.xlsx2(file="./data/gas.xlsx",sheetIndex = 1,rowIndex=18:23,colIndex = 7:15)
dat
dat <- read.xlsx("./data/gas.xlsx",1,rowIndex = 18:23)
dat
dat <- read.xlsx("./data/gas.xlsx",1,rowIndex = 18:23,colIndex = 7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml','./data/resterant.xlsx',mode='wb')
install.packages("XML")
library(XML)
doc<-xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml',useInternalNodes = TRUE)
fileurl="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreeParse(fileurl,useInternalNodes = TRUE)
doc<-xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml',useInternalNodes = TRUE)
doc
doc <- xmlTreeParse(sub("s", "", fileurl), useInternal = TRUE)
doc
root <- xmlRoot(doc)
names(root)
root[[1]]
root[1]
root[[1]][[1]]
root[[1]][[1]][[2]]
xpathSApply(doc,'zipcode',xmlValue)
xpathSApply(root[[1]],'zipcode',xmlValue)
xpathSApply(root[[1]][[1]],'zipcode',xmlValue)
class(xpathSApply(root[[1]][[1]],'zipcode',xmlValue))
r=0
for(i in 1:1327) {num <- pathSApply(root[[1]][[i]],'zipcode',xmlValue)
if(num=='21231'){r+=1}
}
r
r=0
for(i in 1:1327) {num <- pathSApply(root[[1]][[i]],'zipcode',xmlValue)
if(num=='21231'){r=r+1}
}
r
r=0
for(i in 1:1327) {num <- xpathSApply(root[[1]][[i]],'zipcode',xmlValue)
if(num=='21231'){r=r+1}
}
r
library(XML)
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(sub("s", "", fileURL), useInternal = TRUE)
root<-xmlRoot(doc)
r=0
for(i in 1:1327) {num <- xpathSApply(root[[1]][[i]],'zipcode',xmlValue)
if(num=='21231'){r=r+1}
}
r
View(data)
View(data)
